#!/usr/bin/env python3
from skyfield.api import load, Topos, utc
from skyfield import almanac
from datetime import datetime, timedelta
from argparse import ArgumentParser
from fractions import Fraction
import time
import os
from pathlib import Path
# from tempfile import TemporaryDirectory
import logging


logger = logging.getLogger('HeraclesXI')
logger.setLevel(logging.INFO)
ch = logging.StreamHandler()
stream_formatter = logging.Formatter('%(asctime)s - %(name)s [%(lineno)3d] - %(levelname)s: %(message)s')
ch.setFormatter(stream_formatter)
logger.addHandler(ch)
logger.info('started')

ap = ArgumentParser()
ap.add_argument('--target', choices=['sunrise', 'sunset'], default='sunrise')
ap.add_argument('--destdir', type=str, default='/tmp', help='destination directory')
ap.add_argument('--minutes_before', type=float, default=18*24*60/360, help='minutes before target')
ap.add_argument('--minutes_after', type=float, default=4*60, help='minutes after target')
ap.add_argument('--seconds_between', type=int, default=60, help='seconds between captures')
ap.add_argument('--fps', type=int, default=15, help='frames per second')
args = ap.parse_args()
logger.info(args.__dict__)

try:
    import cv2
    logger.info('using opencv')
    def capture(to_path):
        cap = cv2.VideoCapture(0)
        leido, frame = cap.read()
        if leido:
            cv2.imwrite(str(to_path), frame)
            logger.info('capture success: %s' % to_path.stem)
        else:
            logger.error('capture failed: %s' % to_path.stem)
        cap.release()

except ImportError:
    from picapture import capture


TOPOS = {
        'pergamino': Topos('33.904 S', '60.570 W'),
        'almagro': Topos('34.606 S', '58.419 W'),
        }


ts = load.timescale()
eph = load('de421.bsp')

is_sun_up = almanac.sunrise_sunset(eph, TOPOS['pergamino'])

BEFORE = timedelta(minutes=args.minutes_before)
AFTER = timedelta(minutes=args.minutes_after)

def is_capture_timeframe(t):
    if args.target == 'sunset':
        return is_sun_up(ts.utc((t - AFTER))) and not is_sun_up(ts.utc((t + BEFORE)))
    elif args.target == 'sunrise':
        return is_sun_up(ts.utc((t + BEFORE))) and not is_sun_up(ts.utc((t - AFTER)))



FFMPEG_CMD = 'ffmpeg -nostdin -framerate {fps} -pattern_type glob -i \'{input_name_format}\' -c:v libx264 -r 20 -pix_fmt yuv420p {output_path}'

def make_timelapse(source_dir, dest_path):
    logger.info('making timelapse to %s' % dest_path)
    cmd = FFMPEG_CMD.format(
                            fps=args.fps,
                            input_name_format=str(source_dir.joinpath('*.png')),
                            output_path=dest_path
                           )
    logger.info(cmd)
    os.system(cmd)
    logger.info('timelapse done!')


# This var also serves as a flag
destdir = None

while True:

    now = datetime.now(utc)

    if is_capture_timeframe(now):

        if not destdir:
            destdir = Path(args.destdir).joinpath(now.strftime('%Y.%m.%d_%H.%M.%S.%f'))
            destdir.mkdir()
            logger.info('destdir created: %r' % destdir)
    
        image_path = destdir.joinpath('%s.png' % now.strftime('%Y.%m.%d_%H.%M.%S.%f'))
        capture(image_path)

    elif destdir:
        make_timelapse(dest_dir, Path(args.destdir).joinpath(now.strftime('%Y.%m.%d.mp4')))
        destdir = None

    logger.debug('sleeping')
    time.sleep(args.seconds_between)
